name: CI/CD Release
on:
  workflow_dispatch:

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      should-release: ${{ steps.check-release.outputs.should-release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version from pubspec.yaml
        id: get-version
        run: |
          curl -sS https://webi.sh/yq | sh
          VERSION=$(yq '.version' pubspec.yaml)
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
      
      - name: Check if release exists
        id: check-release
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          if gh release view "$VERSION" >/dev/null 2>&1; then
            echo "Release $VERSION already exists, skipping..."
            echo "should-release=false" >> $GITHUB_OUTPUT
          else
            echo "should-release=true" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  windows: 
    name: Build Windows
    runs-on: windows-latest
    needs: check-version
    if: needs.check-version.outputs.should-release == 'true'
    steps: 
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-pc-windows-msvc
      
      - name: Set up environment vars
        shell: bash
        run: |
          echo "GITHUB_REPOSITORY_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV
          echo "VERSION=${{ needs.check-version.outputs.version }}" >> $GITHUB_ENV

        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      
      - name: Build and Release
        run: |
          flutter pub get
          flutter config --enable-windows-desktop
          dart pub global activate fastforge
          fastforge release --name windows
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  release:
    runs-on: ubuntu-latest
    needs: 
      - check-version
      - windows
    if: needs.check-version.outputs.should-release == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up environment vars
        run: |
          echo "VERSION=${{ needs.check-version.outputs.version }}" >> $GITHUB_ENV
      
      - name: Publish release
        run: |
          gh release edit "$VERSION" --draft=false
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
